# Load necessary libraries
library(ggplot2)
library(dplyr)
library(openxlsx)

# ========================== LOAD & MERGE DATA ==========================

# Load the two data files
file1 <- "/Users/unek/Documents/23.2.24_apmaldi_data/gin31_combined_4dp.xlsx"
file2 <- "/Users/unek/Documents/23.2.24_apmaldi_data/ha_combined_4dp.xlsx"

df1 <- read.xlsx(file1)
df2 <- read.xlsx(file2)

# Ensure mz is numeric
df1$mz <- as.numeric(df1$mz)
df2$mz <- as.numeric(df2$mz)

# Merge datasets by mz (keeping all unique mz values)
df_combined <- full_join(df1, df2, by = "mz")

# Identify intensity columns (excluding mz)
intensity_cols <- setdiff(names(df_combined), "mz")

# Convert intensity columns to numeric
df_combined[intensity_cols] <- lapply(df_combined[intensity_cols], function(x) as.numeric(as.character(x)))

# ========================== MINIMAL VALUE IMPUTATION ==========================

# Find the smallest positive value in the dataset
min_positive_value <- min(df_combined[intensity_cols][df_combined[intensity_cols] > 0], na.rm = TRUE)

# Perform minimal imputation: replace NAs and zeros with the smallest positive value
df_combined[intensity_cols][is.na(df_combined[intensity_cols])] <- min_positive_value
df_combined[intensity_cols][df_combined[intensity_cols] == 0] <- min_positive_value

# ========================== REPLACEMENT OF ZERO & NEGATIVE VALUES (MetaboAnalyst Approach) ==========================

# Define replacement value as one-tenth of the smallest positive value
replacement_value <- min_positive_value / 10

# Replace zero and negative values
df_combined[intensity_cols][df_combined[intensity_cols] <= 0] <- replacement_value

# Save the preprocessed dataset (before log transformation)
preprocessed_output_path <- "/Users/unek/Desktop/ha_gin31preprocessed.xlsx"
write.xlsx(df_combined, preprocessed_output_path, row.names = FALSE)
cat("Preprocessed data saved to:", preprocessed_output_path, "\n")

# ========================== APPLY LOG10 TRANSFORMATION ==========================

df_log10 <- df_combined
df_log10[intensity_cols] <- lapply(df_log10[intensity_cols], function(x) log10(x))  # No +1, to match MetaboAnalyst

# Save transformed data (before scaling)
transformed_output_path <- "/Users/unek/Desktop/ha_gin31transformed_log10.xlsx"
write.xlsx(df_log10, transformed_output_path, row.names = FALSE)
cat("Log10 transformed data saved to:", transformed_output_path, "\n")

# ========================== SCALING CHOICE ==========================

# Choose scaling method: "pareto", "autoscale", or "none"
scaling_method <- "pareto"  # Change this to "autoscale" or "none" as needed

# Function to apply selected scaling
apply_scaling <- function(df, method) {
  if (method == "pareto") {
    df_scaled <- df
    df_scaled[intensity_cols] <- scale(df[intensity_cols], center = TRUE, scale = sqrt(apply(df[intensity_cols], 2, sd, na.rm = TRUE)))
    return(df_scaled)
  } else if (method == "autoscale") {
    df_scaled <- df
    df_scaled[intensity_cols] <- scale(df[intensity_cols])
    return(df_scaled)
  } else {
    return(df)  # If "none", return original transformed data without scaling
  }
}

# Apply chosen scaling method
df_scaled <- apply_scaling(df_log10, scaling_method)

# Save scaled data only if a scaling method is chosen
if (scaling_method != "none") {  
  scaled_output_path <- paste0("/Users/unek/Desktop/ha_gin31_log10_", scaling_method, "_scaled.xlsx")
  write.xlsx(df_scaled, scaled_output_path, row.names = FALSE)
  cat("Log10 transformed +", scaling_method, "scaled data saved to:", scaled_output_path, "\n")
} else {
  cat("No scaling applied. Using only transformed data.\n")
}

# ========================== CREATE HISTOGRAM PLOTS ==========================

# Define colors for transformations
color_log10 <- "red"
  
# Function to generate histogram
generate_histogram <- function(df, title, color) {
  df$mean_intensity <- rowMeans(df[intensity_cols], na.rm = TRUE)
  ggplot(df, aes(x = mean_intensity)) +
    geom_histogram(bins = 30, fill = color, color = "black", alpha = 0.7) +
    labs(title = title, x = "Mean Intensity", y = "Frequency") +
    theme_minimal() +
    theme(plot.title = element_text(size = 10))  # Reduce title size to prevent overlap
}

# Generate histograms for transformations
p1 <- generate_histogram(df_log10, "Log10 Transformed Mean Intensity", color_log10)

# Generate histogram for scaled data (only if scaling is applied)
if (scaling_method != "none") {
  p2 <- generate_histogram(df_scaled, paste("Log10 +", scaling_method, "Scaled"), color_log10)
}

# ========================== SAVE HISTOGRAMS ==========================

# Save transformation histogram
ggsave("/Users/unek/Desktop/log10_transformed_histogram.png", plot = p1, width = 6, height = 4, dpi = 300)
cat("Log10 transformed histogram saved.\n")

# Save scaled histogram if applicable
if (scaling_method != "none") {
  ggsave(paste0("/Users/unek/Desktop/log10_", scaling_method, "_scaled_histogram.png"), plot = p2, width = 6, height = 4, dpi = 300)
  cat("Scaled histogram saved.\n")
}

# ========================== SAVE PREPROCESSED HISTOGRAM ==========================

  
# Generate histogram for preprocessed data (before transformation)
color_preprocessed <- "blue"
p0 <- generate_histogram(df_combined, "Preprocessed Mean Intensity (No Transformation)", color_preprocessed)
ggsave("/Users/unek/Desktop/preprocessed_histogram.png", plot = p0, width = 6, height = 4, dpi = 300)
cat("Preprocessed data histogram saved.\n")


