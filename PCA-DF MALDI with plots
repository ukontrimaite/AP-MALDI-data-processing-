# ============================
# Setup & Load Required Packages
# ============================
if (!require("pracma")) install.packages("pracma")
if (!require("ggplot2")) install.packages("ggplot2")
if (!require("ggthemes")) install.packages("ggthemes")
if (!require("scales")) install.packages("scales")
if (!require("ggrepel")) install.packages("ggrepel")

library(pracma)
library(ggplot2)
library(ggthemes)
library(scales)
library(ggrepel)

# ============================
# Define File Paths
# ============================
data_path <- "/Users/unek/Desktop/HA_CO.csv"
pca_output_path <- "/Users/unek/Desktop/pca_results_negative.csv"
pca_scores_path <- "/Users/unek/Desktop/pca_scores.csv"
dfa_output_path <- "/Users/unek/Desktop/dfa_results_single_cell_negative.csv"
dfa_loadings_path <- "/Users/unek/Desktop/dfa_loadings_gin_ha.csv"

pca_plot_path <- "/Users/unek/Desktop/PCA_plot_final.png"
pca_plot_ci_path <- "/Users/unek/Desktop/PCA_plot_with_95CI.png"
pca_plot_filled_path <- "/Users/unek/Desktop/PCA_plot_filled_ellipses.png"

# ============================
# Load and Preprocess Data
# ============================
data <- read.csv(data_path, header = TRUE, stringsAsFactors = FALSE, check.names = FALSE)

label <- as.factor(data[, 1])  # Class labels
features <- data.matrix(data[, -1])  # Numeric features

# Log + Pareto transformation
features <- log10(features + 1)
features <- scale(features, center = TRUE, scale = sqrt(apply(features, 2, sd)))

# ===========================
# PCA
# ============================
pca_results <- prcomp(features, center = FALSE, scale. = FALSE)
pca_variance <- pca_results$sdev^2
pca_variance_ratio <- (pca_variance / sum(pca_variance)) * 100

# Extract PCA scores and save
pca_scores <- data.frame(PC1 = pca_results$x[, 1],
                         PC2 = pca_results$x[, 2],
                         Class = label)
write.csv(pca_results$x, pca_output_path, row.names = TRUE)
write.csv(pca_scores, pca_scores_path, row.names = TRUE)

# ============================
# PCA Plot (Main Version)
# ============================
pc1_var <- round(pca_variance_ratio[1], 2)
pc2_var <- round(pca_variance_ratio[2], 2)

p_main <- ggplot(pca_scores, aes(x = PC1, y = PC2, color = Class)) +
  geom_point(size = 3.5, alpha = 0.9) +
  geom_vline(xintercept = 0, linetype = "dashed", color = "gray70") +
  geom_hline(yintercept = 0, linetype = "dashed", color = "gray70") +
  scale_color_brewer(palette = "Dark2") +
  theme_classic(base_size = 12) +
  theme(panel.border = element_rect(color = "black", fill = NA, linewidth = 0.6),
        axis.line = element_blank(),
        legend.title = element_blank()) +
  labs(x = paste0("PC1 (", pc1_var, "%)"),
       y = paste0("PC2 (", pc2_var, "%)"))

ggsave(pca_plot_path, plot = p_main, width = 8, height = 6)

# ============================
# PCA Plot with 95% CI Ellipses
# ============================
p_ellipse <- p_main +
  stat_ellipse(type = "norm", level = 0.95, linewidth = 0.8, alpha = 0.15)

ggsave(pca_plot_ci_path, plot = p_ellipse, width = 8, height = 6)

# ============================
# PCA Plot with Filled Ellipses
# ============================
p_filled <- ggplot(pca_scores, aes(x = PC1, y = PC2, color = Class, fill = Class)) +
  geom_point(size = 3.5, alpha = 0.9) +
  stat_ellipse(type = "norm", geom = "polygon", level = 0.95, alpha = 0.2, color = NA) +
  geom_vline(xintercept = 0, linetype = "dashed", color = "gray70") +
  geom_hline(yintercept = 0, linetype = "dashed", color = "gray70") +
  scale_color_brewer(palette = "Dark2") +
  scale_fill_brewer(palette = "Dark2") +
  theme_classic(base_size = 12) +
  theme(panel.border = element_rect(color = "black", fill = NA, linewidth = 0.6),
        axis.line = element_blank(),
        axis.title.x = element_text(face = "bold"),
        axis.title.y = element_text(face = "bold"),
        legend.title = element_blank()) +
  labs(x = paste0("PC1 (", pc1_var, "%)"),
       y = paste0("PC2 (", pc2_var, "%)"))

ggsave(pca_plot_filled_path, plot = p_filled, width = 8, height = 6)

# ============================
# DFA Function
# ============================
pcdfa <- function(x, label, no_pc = 10, maxfac = NULL) {
  unique_label <- unique(label)
  no_class <- length(unique_label)
  if (no_class < 2) stop("Number of classes must be > 1")
  if (is.null(maxfac) || maxfac > no_class - 1) {
    maxfac <- no_class - 1
  }
  
  xmean <- colMeans(x)
  pca_results <- prcomp(x)
  x <- pca_results$x[, 1:no_pc]
  pc_loadings <- pca_results$rotation[, 1:no_pc]
  
  mx <- colMeans(x)
  Tt <- matrix(0, ncol(x), ncol(x))
  W <- matrix(0, ncol(x), ncol(x))
  
  for (i in unique_label) {
    K <- x[label == i, ]
    ns <- nrow(K)
    zz <- if (ns > 1) colMeans(K) else K
    A <- K - matrix(mx, nrow = ns, ncol = ncol(K), byrow = TRUE)
    C <- K - matrix(zz, nrow = ns, ncol = ncol(K), byrow = TRUE)
    Tt <- Tt + t(A) %*% A
    W <- W + t(C) %*% C
  }
  
  B <- Tt - W
  invW <- solve(W)
  P <- invW %*% B
  P_eigen <- eigen(P)
  V <- Re(P_eigen$vectors[, 1:maxfac])
  U <- x %*% V
  loadings <- pc_loadings %*% V
  
  return(list(scores = U, loadings = loadings, eigenvalues = P_eigen$values, xmean = xmean))
}

# ============================
# Perform DFA for Selected Groups
# ============================
selected_groups <- c("HA_GIN", "HA")
filtered_data <- data[data[, 1] %in% selected_groups, ]
filtered_label <- as.factor(filtered_data[, 1])
filtered_features <- data.matrix(filtered_data[, -1])

dfa_results <- pcdfa(filtered_features, label = filtered_label, no_pc = 10, maxfac = NULL)

write.csv(dfa_results$scores, dfa_output_path, row.names = TRUE)
write.csv(dfa_results$loadings, dfa_loadings_path, row.names = TRUE)

cat("âœ… All PCA and DFA results saved successfully.\n")

