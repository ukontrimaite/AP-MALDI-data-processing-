# Load necessary libraries
library(openxlsx)  # For reading Excel files
library(ggplot2)   # For plotting
library(moments)   # For skewness
library(nortest)   # For normality tests
library(scales)    # For transformations

# Load the file
file_path <- "/Users/file_name.xlsx"
output_path <- "/Users/file_path/"  # Get directory of the input file

# Read the Excel file (assumes data is in the first sheet)
data <- read.xlsx(file_path, sheet = 1)

# Extract intensity values (excluding the first column which is m/z)
intensity_cols <- colnames(data)[-1]  # Assume first column is m/z
df_intensity <- data

# ========================== ORIGINAL DATA STATISTICS ==========================

cat("Original Data Statistics:\n")
print(shapiro.test(sample(as.numeric(unlist(df_intensity[intensity_cols])), min(5000, length(unlist(df_intensity[intensity_cols]))))))
print(skewness(as.numeric(unlist(df_intensity[intensity_cols]))))

# ========================== REPLACEMENT OF ZERO & NEGATIVE VALUES ==========================

min_positive_value <- min(df_intensity[intensity_cols][df_intensity[intensity_cols] > 0], na.rm = TRUE)
replacement_value <- min_positive_value / 10
df_intensity[intensity_cols][df_intensity[intensity_cols] <= 0] <- replacement_value

# Save the preprocessed dataset
preprocessed_output_path <- file.path(output_path, "preprocessed_data.xlsx")
write.xlsx(df_intensity, preprocessed_output_path, row.names = FALSE)
cat("Preprocessed data saved to:", preprocessed_output_path, "\n")

# ========================== APPLY TRANSFORMATION & SCALING ==========================

apply_transformation <- function(df, method) {
  transformed_df <- df
  if (method == "log10") {
    transformed_df[intensity_cols] <- log10(df[intensity_cols])
    label <- "Log10 Transformed"
  } else if (method == "sqrt") {
    transformed_df[intensity_cols] <- sqrt(df[intensity_cols])
    label <- "Square Root Transformed"
  } else {
    label <- "No Transformation"
  }
  
  return(list(df = transformed_df, label = label))
}

apply_scaling <- function(df, method) {
  scaled_df <- df
  if (method == "pareto") {
    scaled_df[intensity_cols] <- scale(df[intensity_cols], center = FALSE, scale = sqrt(apply(df[intensity_cols], 2, sd, na.rm = TRUE)))
    label <- "Pareto Scaled"
  } else if (method == "autoscale") {
    scaled_df[intensity_cols] <- scale(df[intensity_cols])
    label <- "Autoscaled"
  } else {
    label <- "No Scaling"
  }
  
  return(list(df = scaled_df, label = label))
}

# Select transformation and scaling method
transformation_method <- "log10"  # Options: "log10", "sqrt", "none"
scaling_method <- "pareto"  # Options: "pareto", "autoscale", "none"

# Apply transformation
transformation_result <- apply_transformation(df_intensity, transformation_method)
df_transformed <- transformation_result$df
transformation_label <- transformation_result$label

# Save transformed data
transformed_output_path <- file.path(output_path, paste0("transformed_", transformation_method, ".xlsx"))
write.xlsx(df_transformed, transformed_output_path, row.names = FALSE)
cat(transformation_label, "data saved to:", transformed_output_path, "\n")

# Apply scaling
scaling_result <- apply_scaling(df_transformed, scaling_method)
df_scaled <- scaling_result$df
scaling_label <- scaling_result$label

# Save scaled data
scaled_output_path <- file.path(output_path, paste0("scaled_", scaling_method, ".xlsx"))
write.xlsx(df_scaled, scaled_output_path, row.names = FALSE)
cat(scaling_label, "data saved to:", scaled_output_path, "\n")

# ========================== FINAL DATA STATISTICS ==========================

cat("Final Data Statistics (", transformation_label, "+", scaling_label, "):\n")
print(shapiro.test(sample(as.numeric(unlist(df_scaled[intensity_cols])), min(5000, length(unlist(df_scaled[intensity_cols]))))))
print(skewness(as.numeric(unlist(df_scaled[intensity_cols]))))

# ========================== HISTOGRAM & Q-Q PLOTS ==========================

plot_histogram <- function(df, label, color) {
  df$mean_intensity <- rowMeans(df[intensity_cols], na.rm = TRUE)
  ggplot(df, aes(x = mean_intensity)) +
    geom_histogram(bins = 30, fill = color, color = "black", alpha = 0.7) +
    labs(title = paste("Histogram of", label, "Mean Intensity"), x = "Mean Intensity", y = "Frequency") +
    theme_minimal()
}

hist_plot <- plot_histogram(df_scaled, paste(transformation_label, scaling_label), "blue")
plot_path <- file.path(output_path, paste0(transformation_label, "_", scaling_label, "_histogram.png"))
ggsave(plot_path, plot = hist_plot, width = 6, height = 4, dpi = 300)
cat("Histogram saved to:", plot_path, "\n")

qq_plot <- ggplot(df_scaled, aes(sample = rowMeans(df_scaled[intensity_cols], na.rm = TRUE))) +
  stat_qq() +
  stat_qq_line(col = "red") +
  theme_minimal() +
  labs(title = paste("Q-Q Plot of", transformation_label, scaling_label, "Mean Intensity"))
qq_plot_path <- file.path(output_path, paste0(transformation_label, "_", scaling_label, "_qq.png"))
ggsave(qq_plot_path, plot = qq_plot, width = 6, height = 4, dpi = 300)
cat("Q-Q plot saved to:", qq_plot_path, "\n")

# ========================== DATA DISTRIBUTION DECISION GUIDE ==========================
#If the data is normally distributed (Shapiro-Wilk p-value > 0.05, skewness close to 0):
#Use parametric tests (e.g., t-test, ANOVA, Pearson correlation).
#If the data is not normally distributed (Shapiro-Wilk p-value < 0.05, skewness high):
#Use nonparametric tests (e.g., Mann-Whitney U test, Kruskal-Wallis, Spearman correlation).
